<launch>
    <arg name="robot" default="uibk-robotino2"/>
    <param name="robot_description" command="$(find xacro)/xacro.py '$(find robotino_bringup)/robots/$(arg robot)/urdf/robotino.urdf.xacro'" /> 

    <arg name="use_robotino_safety" value="true" />
    <arg name="hostname" default="127.0.1.1" />
    <param name="use_sim_time" value="false" />


    <node name="robotino_node" pkg="robotino_driver" type="robotino_driver" output="screen">
    <param name="hostname" value="$(arg hostname)" />
    <param name="max_linear_vel" value="0.5" />
    <param name="min_linear_vel" value="0.00005" />
    <param name="max_angular_vel" value="0.5" />
    <param name="min_angular_vel" value="0.00001" />
    <param name="downsample_kinect" value="true" />
    <param name="leaf_size_kinect" value="0.04" />
    <remap from="robotino_joint_states" to="joint_states" />
    <remap from="cmd_vel" to="robotino_cmd_vel" if="$(arg use_robotino_safety)" />
    </node>

  <include file="$(find robotino_safety)/launch/robotino_safety_node.launch" if="$(arg use_robotino_safety)">
    <arg name="use_safe_velocity" value="false" />
    <arg name="controller_vel_topic" value="/robotino_cmd_vel" />
    <arg name="bumper_topic" value="/bumper" />
    <arg name="scan_topic" value="/scan" />
  </include>

  <node name="robotino_odometry_node" pkg="robotino_driver" type="robotino_odometry_node" output="screen">
    <param name="hostname" value="$(arg hostname)" />
  </node>

  <include file="$(find robotino_bringup)/launch/twist_mux.launch" >
    <arg name="robot" value="$(arg robot)" />
  </include>


  <group ns="arm_controller">
    <node name="squirrel_control_node" pkg="squirrel_control" type="squirrel_hw_main" output="screen" respawn="true">
      <!--remap from="/cmd_rotatory" to="/cmd_vel"/-->
   </node>
    
    <!-- Load controller settings -->
    <rosparam file="$(find squirrel_control)/config/controllers.yaml" command="load"/>

    <!-- Load controller manager -->
    <node name="ros_control_controller_manager" pkg="controller_manager" type="controller_manager" respawn="false"
      output="screen" args="spawn joint_state_controller joint_trajectory_controller" />

    <!-- Convert joint states to /tf tranforms -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>

    <node name="joint_states_relay" pkg="topic_tools" type="relay" args="joint_states /joint_states" cwd="node" respawn="true" output="screen"/>

  </group>
</launch>
